buildscript {
    repositories {
        maven  {
        url "https://repo1.maven.org/maven2"
    		}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'war'

description = "Worldpay's EWS Simulator v${JAR_VERSION}"

configurations {
    jaxb
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated"
        }
    }
}

bootJar {
    baseName = "${JAR_NAME}"
    version =  "${JAR_VERSION}"
}

bootWar {
    baseName = "${JAR_NAME}"
    version =  "${JAR_VERSION}"
}

repositories {
    maven  {
        url "https://repo1.maven.org/maven2"
    }
}


jacocoTestReport {
    //executionData = fileTree(dir:"${buildDir}/jacoco/", include:"*.exec")
    reports {
        xml.enabled true
        html.enabled true
    }
}



sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-web-services")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.1'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile group: 'wsdl4j', name: 'wsdl4j', version: '1.6.1'
    jaxb group:'com.sun.xml.bind', name:'jaxb-core', version:'2.2.7'
    jaxb group:'com.sun.xml.bind', name:'jaxb-impl', version:'2.2.5-5'
    jaxb group:'com.sun.xml.bind', name:'jaxb-xjc', version:'2.2.5'

    testCompile 'org.mockito:mockito-core:2.8.9'
    testCompile 'org.powermock:powermock-api-mockito2:1.7.0RC4'
    testCompile 'org.powermock:powermock-module-junit4:1.7.0'
    testCompile 'org.powermock:powermock-core:1.7.0'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.7.0'
}

task jaxb () {
    ext.jaxbTargetDir = file( "${buildDir}/generated" )

    doLast {
        jaxbTargetDir.mkdirs()

        ant.taskdef(name: 'xjc', classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)
        ant.jaxbTargetDir = jaxbTargetDir

        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'com.worldpay.simulator',
                schema: 'src/main/resources/xsd/xmldsig-core-schema.xsd'
        )

        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'com.worldpay.simulator',
                schema: 'src/main/resources/xsd/oasis-200401-wss-wssecurity-secext-1.0.xsd'
        )

        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'com.worldpay.simulator',
                schema: 'src/main/resources/xsd/oasis-200401-wss-wssecurity-utility-1.0.xsd'
        )

        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'com.worldpay.simulator',
                schema: 'src/main/resources/xsd/encryption_v4_transactions.xsd'
        )

    }
}

javadoc{
    destinationDir = file("$buildDir/doc")
}

task copyJarToKit(type:Copy, dependsOn:[check,bootJar]){
    from "${buildDir}/libs/${JAR_NAME}-${JAR_VERSION}.jar"
    from "LICENSE"
    into KIT_DIR
}

task copyWarToKit(type:Copy, dependsOn:[check,bootWar]){
    from "${buildDir}/libs/${JAR_NAME}-${JAR_VERSION}.war"
    from "LICENSE"
    into KIT_DIR
}

task copyLibsToKit(type:Copy, dependsOn:check){
    from configurations.compile.asFileTree.matching{
        include '**/activation*'
        include '**/jaxb-api*'
        include '**/jaxb-impl*'
        include '**/jsr173*'
        include '**/commons-logging-1.1.1*'
        include '**/commons-codec*'
        include '**/fluent-hc*'
        include '**/httpclient*'
        include '**/httpcore*'
        include '**/httpmime*'
        include '**/jsch*'
    }

    into KIT_DEPENDENCIES_DIR
}

task tarKit(type:Tar, dependsOn:[copyJarToKit, copyWarToKit, copyLibsToKit]){
    compression = Compression.GZIP
    destinationDir = file("$buildDir/${RELEASE_DIR}")
    archiveName = "${JAR_NAME}-${JAR_VERSION}.tar.gz"
    from "$buildDir/kit/java15"
}

task zipKit(type:Zip, dependsOn:[copyJarToKit, copyWarToKit, copyLibsToKit]){
    destinationDir = file("$buildDir/${RELEASE_DIR}")
    archiveName = "${JAR_NAME}-${JAR_VERSION}.zip"
    from "$buildDir/kit/java15"
}

task kit(dependsOn:[tarKit, zipKit]){
    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
    build.dependsOn it
    dependsOn javadoc
}

task writeNewPom(type:Copy) {
    build.dependsOn it
    pom {
        project {
            modelVersion '4.0.0'
            groupId 'com.worldpay'
            artifactId "${JAR_NAME}"
            version "${JAR_VERSION}"
        }
    }.writeTo("$buildDir/${RELEASE_DIR}/${JAR_NAME}-${JAR_VERSION}.pom")
}

task sourceJar(type:Jar) {
    build.dependsOn it
    dependsOn jaxb
    destinationDir = file("${buildDir}/${RELEASE_DIR}")
    archiveName = "${JAR_NAME}-${JAR_VERSION}-sources.jar"
    from "src/main/java"
    from jaxb.jaxbTargetDir
}

compileJava.dependsOn jaxb





